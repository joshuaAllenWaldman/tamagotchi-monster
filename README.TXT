READ ME:

Welcome to "Digital Monster Caretaker Simulator"! 

This is a modest replica or the Tamagotchi craze of the early 90's in which the player takes responsibility for a digital Monster. Monitor various needs of the Monster and make sure that the Boredom, Hunger or Tiredness levels don't reach their threshold otherwise your Monster may die!

"Digital Monster Caretaker Simulator" was created using  HTML5, CSS and JavaScript.


HOW TO PLAY:

 1. Give your Monster a good name.
 2. Press Start to begin the Game
 3. Monsters are very needy and require constant maintenance. Use the Feed, Play, and Sleep buttons to keep the Monster's Hunger, Boredom, and Tiredness meter bars from filling up. Once one of them fills up you can basically kiss your Monster goodbye forever because it is now dead.
 4. Track how long you can keep your Monster alive by recording the highest age you can reach. (Note, Monster's age differently than humans. 1 Monster year is equal to 10,000 of our Human milliseconds.)
5. If your monster dies that is it. You lose. However, if for some reason you enjoy the experience you can start over from Game Over screen to try again with the same monster or you can  refresh the page to pick a better name. 


Thank you for playing and please do not purchase a Monster in real life. 

WireFrames included in repository.

Milestones

-Figuring out where to get started. After writing out the wireframes I could see where I needed it to be but had no clue as to      where to start. So I began working on the super class for the Monster. I found just picking a place and starting helped me to start seeing where I needed to go next.

-Creating Main Game logic. Was a big win to figure out how to create the main JavaScript logic to get the game to move. 

-Solving the "this"/anonymous function issue. I coudn't get my class methods to work in the event listeners and had no idea why. After asking a lot of questions I finally figured out that it had to do with the this keyword and was able to figure out how to get it to work.

-CSS. This took up most of my time. Although it doesn't look like much it took me a long time to get the CSS to look like this. 




